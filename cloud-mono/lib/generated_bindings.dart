// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Void> memchr(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memchr(
      __s,
      __c,
      __n,
    );
  }

  late final _memchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int32, size_t)>>('memchr');
  late final _memchr = _memchrPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int memcmp(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _memcmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _memcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, size_t)>>('memcmp');
  late final _memcmp = _memcmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memcpy(
    ffi.Pointer<ffi.Void> __dst,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memcpy(
      __dst,
      __src,
      __n,
    );
  }

  late final _memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, size_t)>>('memcpy');
  late final _memcpy = _memcpyPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memmove(
    ffi.Pointer<ffi.Void> __dst,
    ffi.Pointer<ffi.Void> __src,
    int __len,
  ) {
    return _memmove(
      __dst,
      __src,
      __len,
    );
  }

  late final _memmovePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, size_t)>>('memmove');
  late final _memmove = _memmovePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memset(
    ffi.Pointer<ffi.Void> __b,
    int __c,
    int __len,
  ) {
    return _memset(
      __b,
      __c,
      __len,
    );
  }

  late final _memsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int32, size_t)>>('memset');
  late final _memset = _memsetPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Int8> strcat(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
  ) {
    return _strcat(
      __s1,
      __s2,
    );
  }

  late final _strcatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('strcat');
  late final _strcat = _strcatPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> strchr(
    ffi.Pointer<ffi.Int8> __s,
    int __c,
  ) {
    return _strchr(
      __s,
      __c,
    );
  }

  late final _strchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Int32)>>('strchr');
  late final _strchr = _strchrPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>, int)>();

  int strcmp(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
  ) {
    return _strcmp(
      __s1,
      __s2,
    );
  }

  late final _strcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('strcmp');
  late final _strcmp = _strcmpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int strcoll(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
  ) {
    return _strcoll(
      __s1,
      __s2,
    );
  }

  late final _strcollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('strcoll');
  late final _strcoll = _strcollPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> strcpy(
    ffi.Pointer<ffi.Int8> __dst,
    ffi.Pointer<ffi.Int8> __src,
  ) {
    return _strcpy(
      __dst,
      __src,
    );
  }

  late final _strcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('strcpy');
  late final _strcpy = _strcpyPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int strcspn(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __charset,
  ) {
    return _strcspn(
      __s,
      __charset,
    );
  }

  late final _strcspnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('strcspn');
  late final _strcspn = _strcspnPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> strerror(
    int __errnum,
  ) {
    return _strerror(
      __errnum,
    );
  }

  late final _strerrorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ffi.Int32)>>(
          'strerror');
  late final _strerror =
      _strerrorPtr.asFunction<ffi.Pointer<ffi.Int8> Function(int)>();

  int strlen(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    return _strlen(
      __s,
    );
  }

  late final _strlenPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<ffi.Int8>)>>(
          'strlen');
  late final _strlen =
      _strlenPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> strncat(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
    int __n,
  ) {
    return _strncat(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>, size_t)>>('strncat');
  late final _strncat = _strncatPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  int strncmp(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
    int __n,
  ) {
    return _strncmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              size_t)>>('strncmp');
  late final _strncmp = _strncmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Int8> strncpy(
    ffi.Pointer<ffi.Int8> __dst,
    ffi.Pointer<ffi.Int8> __src,
    int __n,
  ) {
    return _strncpy(
      __dst,
      __src,
      __n,
    );
  }

  late final _strncpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>, size_t)>>('strncpy');
  late final _strncpy = _strncpyPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Int8> strpbrk(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __charset,
  ) {
    return _strpbrk(
      __s,
      __charset,
    );
  }

  late final _strpbrkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('strpbrk');
  late final _strpbrk = _strpbrkPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> strrchr(
    ffi.Pointer<ffi.Int8> __s,
    int __c,
  ) {
    return _strrchr(
      __s,
      __c,
    );
  }

  late final _strrchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Int32)>>('strrchr');
  late final _strrchr = _strrchrPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>, int)>();

  int strspn(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __charset,
  ) {
    return _strspn(
      __s,
      __charset,
    );
  }

  late final _strspnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('strspn');
  late final _strspn = _strspnPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> strstr(
    ffi.Pointer<ffi.Int8> __big,
    ffi.Pointer<ffi.Int8> __little,
  ) {
    return _strstr(
      __big,
      __little,
    );
  }

  late final _strstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('strstr');
  late final _strstr = _strstrPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> strtok(
    ffi.Pointer<ffi.Int8> __str,
    ffi.Pointer<ffi.Int8> __sep,
  ) {
    return _strtok(
      __str,
      __sep,
    );
  }

  late final _strtokPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('strtok');
  late final _strtok = _strtokPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int strxfrm(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
    int __n,
  ) {
    return _strxfrm(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strxfrmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              size_t)>>('strxfrm');
  late final _strxfrm = _strxfrmPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Int8> strtok_r(
    ffi.Pointer<ffi.Int8> __str,
    ffi.Pointer<ffi.Int8> __sep,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __lasts,
  ) {
    return _strtok_r(
      __str,
      __sep,
      __lasts,
    );
  }

  late final _strtok_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>('strtok_r');
  late final _strtok_r = _strtok_rPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  int strerror_r(
    int __errnum,
    ffi.Pointer<ffi.Int8> __strerrbuf,
    int __buflen,
  ) {
    return _strerror_r(
      __errnum,
      __strerrbuf,
      __buflen,
    );
  }

  late final _strerror_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32, ffi.Pointer<ffi.Int8>, size_t)>>('strerror_r');
  late final _strerror_r = _strerror_rPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Int8> strdup(
    ffi.Pointer<ffi.Int8> __s1,
  ) {
    return _strdup(
      __s1,
    );
  }

  late final _strdupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>>('strdup');
  late final _strdup = _strdupPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Void> memccpy(
    ffi.Pointer<ffi.Void> __dst,
    ffi.Pointer<ffi.Void> __src,
    int __c,
    int __n,
  ) {
    return _memccpy(
      __dst,
      __src,
      __c,
      __n,
    );
  }

  late final _memccpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int32, size_t)>>('memccpy');
  late final _memccpy = _memccpyPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Int8> stpcpy(
    ffi.Pointer<ffi.Int8> __dst,
    ffi.Pointer<ffi.Int8> __src,
  ) {
    return _stpcpy(
      __dst,
      __src,
    );
  }

  late final _stpcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('stpcpy');
  late final _stpcpy = _stpcpyPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> stpncpy(
    ffi.Pointer<ffi.Int8> __dst,
    ffi.Pointer<ffi.Int8> __src,
    int __n,
  ) {
    return _stpncpy(
      __dst,
      __src,
      __n,
    );
  }

  late final _stpncpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>, size_t)>>('stpncpy');
  late final _stpncpy = _stpncpyPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Int8> strndup(
    ffi.Pointer<ffi.Int8> __s1,
    int __n,
  ) {
    return _strndup(
      __s1,
      __n,
    );
  }

  late final _strndupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, size_t)>>('strndup');
  late final _strndup = _strndupPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>, int)>();

  int strnlen(
    ffi.Pointer<ffi.Int8> __s1,
    int __n,
  ) {
    return _strnlen(
      __s1,
      __n,
    );
  }

  late final _strnlenPtr = _lookup<
          ffi.NativeFunction<size_t Function(ffi.Pointer<ffi.Int8>, size_t)>>(
      'strnlen');
  late final _strnlen =
      _strnlenPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Int8> strsignal(
    int __sig,
  ) {
    return _strsignal(
      __sig,
    );
  }

  late final _strsignalPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ffi.Int32)>>(
          'strsignal');
  late final _strsignal =
      _strsignalPtr.asFunction<ffi.Pointer<ffi.Int8> Function(int)>();

  int memset_s(
    ffi.Pointer<ffi.Void> __s,
    int __smax,
    int __c,
    int __n,
  ) {
    return _memset_s(
      __s,
      __smax,
      __c,
      __n,
    );
  }

  late final _memset_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.Void>, rsize_t, ffi.Int32, rsize_t)>>('memset_s');
  late final _memset_s = _memset_sPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int, int, int)>();

  ffi.Pointer<ffi.Void> memmem(
    ffi.Pointer<ffi.Void> __big,
    int __big_len,
    ffi.Pointer<ffi.Void> __little,
    int __little_len,
  ) {
    return _memmem(
      __big,
      __big_len,
      __little,
      __little_len,
    );
  }

  late final _memmemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, size_t,
              ffi.Pointer<ffi.Void>, size_t)>>('memmem');
  late final _memmem = _memmemPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>, int)>();

  void memset_pattern4(
    ffi.Pointer<ffi.Void> __b,
    ffi.Pointer<ffi.Void> __pattern4,
    int __len,
  ) {
    return _memset_pattern4(
      __b,
      __pattern4,
      __len,
    );
  }

  late final _memset_pattern4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              size_t)>>('memset_pattern4');
  late final _memset_pattern4 = _memset_pattern4Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void memset_pattern8(
    ffi.Pointer<ffi.Void> __b,
    ffi.Pointer<ffi.Void> __pattern8,
    int __len,
  ) {
    return _memset_pattern8(
      __b,
      __pattern8,
      __len,
    );
  }

  late final _memset_pattern8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              size_t)>>('memset_pattern8');
  late final _memset_pattern8 = _memset_pattern8Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void memset_pattern16(
    ffi.Pointer<ffi.Void> __b,
    ffi.Pointer<ffi.Void> __pattern16,
    int __len,
  ) {
    return _memset_pattern16(
      __b,
      __pattern16,
      __len,
    );
  }

  late final _memset_pattern16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              size_t)>>('memset_pattern16');
  late final _memset_pattern16 = _memset_pattern16Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Int8> strcasestr(
    ffi.Pointer<ffi.Int8> __big,
    ffi.Pointer<ffi.Int8> __little,
  ) {
    return _strcasestr(
      __big,
      __little,
    );
  }

  late final _strcasestrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('strcasestr');
  late final _strcasestr = _strcasestrPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> strnstr(
    ffi.Pointer<ffi.Int8> __big,
    ffi.Pointer<ffi.Int8> __little,
    int __len,
  ) {
    return _strnstr(
      __big,
      __little,
      __len,
    );
  }

  late final _strnstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>, size_t)>>('strnstr');
  late final _strnstr = _strnstrPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  int strlcat(
    ffi.Pointer<ffi.Int8> __dst,
    ffi.Pointer<ffi.Int8> __source,
    int __size,
  ) {
    return _strlcat(
      __dst,
      __source,
      __size,
    );
  }

  late final _strlcatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              size_t)>>('strlcat');
  late final _strlcat = _strlcatPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  int strlcpy(
    ffi.Pointer<ffi.Int8> __dst,
    ffi.Pointer<ffi.Int8> __source,
    int __size,
  ) {
    return _strlcpy(
      __dst,
      __source,
      __size,
    );
  }

  late final _strlcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              size_t)>>('strlcpy');
  late final _strlcpy = _strlcpyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  void strmode(
    int __mode,
    ffi.Pointer<ffi.Int8> __bp,
  ) {
    return _strmode(
      __mode,
      __bp,
    );
  }

  late final _strmodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int32, ffi.Pointer<ffi.Int8>)>>('strmode');
  late final _strmode =
      _strmodePtr.asFunction<void Function(int, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> strsep(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __stringp,
    ffi.Pointer<ffi.Int8> __delim,
  ) {
    return _strsep(
      __stringp,
      __delim,
    );
  }

  late final _strsepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Pointer<ffi.Int8>)>>('strsep');
  late final _strsep = _strsepPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Pointer<ffi.Int8>)>();

  void swab(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _swab(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _swabPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ssize_t)>>('swab');
  late final _swab = _swabPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int timingsafe_bcmp(
    ffi.Pointer<ffi.Void> __b1,
    ffi.Pointer<ffi.Void> __b2,
    int __len,
  ) {
    return _timingsafe_bcmp(
      __b1,
      __b2,
      __len,
    );
  }

  late final _timingsafe_bcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              size_t)>>('timingsafe_bcmp');
  late final _timingsafe_bcmp = _timingsafe_bcmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int strsignal_r(
    int __sig,
    ffi.Pointer<ffi.Int8> __strsignalbuf,
    int __buflen,
  ) {
    return _strsignal_r(
      __sig,
      __strsignalbuf,
      __buflen,
    );
  }

  late final _strsignal_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32, ffi.Pointer<ffi.Int8>, size_t)>>('strsignal_r');
  late final _strsignal_r = _strsignal_rPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Int8>, int)>();

  int bcmp(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _bcmp(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _bcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, size_t)>>('bcmp');
  late final _bcmp = _bcmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bcopy(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _bcopy(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _bcopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, size_t)>>('bcopy');
  late final _bcopy = _bcopyPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bzero(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    return _bzero(
      arg0,
      arg1,
    );
  }

  late final _bzeroPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>, size_t)>>(
      'bzero');
  late final _bzero =
      _bzeroPtr.asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Int8> index(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
  ) {
    return _index(
      arg0,
      arg1,
    );
  }

  late final _indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Int32)>>('index');
  late final _index = _indexPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Int8> rindex(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
  ) {
    return _rindex(
      arg0,
      arg1,
    );
  }

  late final _rindexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Int32)>>('rindex');
  late final _rindex = _rindexPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>, int)>();

  int ffs(
    int arg0,
  ) {
    return _ffs(
      arg0,
    );
  }

  late final _ffsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('ffs');
  late final _ffs = _ffsPtr.asFunction<int Function(int)>();

  int strcasecmp(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    return _strcasecmp(
      arg0,
      arg1,
    );
  }

  late final _strcasecmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('strcasecmp');
  late final _strcasecmp = _strcasecmpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int strncasecmp(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    return _strncasecmp(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _strncasecmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              size_t)>>('strncasecmp');
  late final _strncasecmp = _strncasecmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  int ffsl(
    int arg0,
  ) {
    return _ffsl(
      arg0,
    );
  }

  late final _ffslPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int64)>>('ffsl');
  late final _ffsl = _ffslPtr.asFunction<int Function(int)>();

  int ffsll(
    int arg0,
  ) {
    return _ffsll(
      arg0,
    );
  }

  late final _ffsllPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int64)>>('ffsll');
  late final _ffsll = _ffsllPtr.asFunction<int Function(int)>();

  int fls(
    int arg0,
  ) {
    return _fls(
      arg0,
    );
  }

  late final _flsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('fls');
  late final _fls = _flsPtr.asFunction<int Function(int)>();

  int flsl(
    int arg0,
  ) {
    return _flsl(
      arg0,
    );
  }

  late final _flslPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int64)>>('flsl');
  late final _flsl = _flslPtr.asFunction<int Function(int)>();

  int flsll(
    int arg0,
  ) {
    return _flsll(
      arg0,
    );
  }

  late final _flsllPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int64)>>('flsll');
  late final _flsll = _flsllPtr.asFunction<int Function(int)>();

  void DiscordCreateParamsSetDefault(
    ffi.Pointer<DiscordCreateParams> params,
  ) {
    return _DiscordCreateParamsSetDefault(
      params,
    );
  }

  late final _DiscordCreateParamsSetDefaultPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<DiscordCreateParams>)>>(
      'DiscordCreateParamsSetDefault');
  late final _DiscordCreateParamsSetDefault = _DiscordCreateParamsSetDefaultPtr
      .asFunction<void Function(ffi.Pointer<DiscordCreateParams>)>();

  int DiscordCreate(
    int version,
    ffi.Pointer<DiscordCreateParams> params,
    ffi.Pointer<ffi.Pointer<IDiscordCore>> result,
  ) {
    return _DiscordCreate(
      version,
      params,
      result,
    );
  }

  late final _DiscordCreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(DiscordVersion, ffi.Pointer<DiscordCreateParams>,
              ffi.Pointer<ffi.Pointer<IDiscordCore>>)>>('DiscordCreate');
  late final _DiscordCreate = _DiscordCreatePtr.asFunction<
      int Function(int, ffi.Pointer<DiscordCreateParams>,
          ffi.Pointer<ffi.Pointer<IDiscordCore>>)>();
}

class __mbstate_t extends ffi.Union {
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Int8> __mbstate8;

  @ffi.Int64()
  external int _mbstateL;
}

class __darwin_pthread_handler_rec extends ffi.Struct {
  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      __routine;

  external ffi.Pointer<ffi.Void> __arg;

  external ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

class _opaque_pthread_attr_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_cond_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_condattr_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_mutex_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_mutexattr_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_once_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_rwlock_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([192])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_rwlockattr_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  external ffi.Pointer<__darwin_pthread_handler_rec> __cleanup_stack;

  @ffi.Array.multi([8176])
  external ffi.Array<ffi.Int8> __opaque;
}

typedef size_t = __darwin_size_t;
typedef __darwin_size_t = ffi.Uint64;
typedef errno_t = ffi.Int32;
typedef rsize_t = __darwin_size_t;
typedef ssize_t = __darwin_ssize_t;
typedef __darwin_ssize_t = ffi.Int64;

abstract class EDiscordResult {
  static const int DiscordResult_Ok = 0;
  static const int DiscordResult_ServiceUnavailable = 1;
  static const int DiscordResult_InvalidVersion = 2;
  static const int DiscordResult_LockFailed = 3;
  static const int DiscordResult_InternalError = 4;
  static const int DiscordResult_InvalidPayload = 5;
  static const int DiscordResult_InvalidCommand = 6;
  static const int DiscordResult_InvalidPermissions = 7;
  static const int DiscordResult_NotFetched = 8;
  static const int DiscordResult_NotFound = 9;
  static const int DiscordResult_Conflict = 10;
  static const int DiscordResult_InvalidSecret = 11;
  static const int DiscordResult_InvalidJoinSecret = 12;
  static const int DiscordResult_NoEligibleActivity = 13;
  static const int DiscordResult_InvalidInvite = 14;
  static const int DiscordResult_NotAuthenticated = 15;
  static const int DiscordResult_InvalidAccessToken = 16;
  static const int DiscordResult_ApplicationMismatch = 17;
  static const int DiscordResult_InvalidDataUrl = 18;
  static const int DiscordResult_InvalidBase64 = 19;
  static const int DiscordResult_NotFiltered = 20;
  static const int DiscordResult_LobbyFull = 21;
  static const int DiscordResult_InvalidLobbySecret = 22;
  static const int DiscordResult_InvalidFilename = 23;
  static const int DiscordResult_InvalidFileSize = 24;
  static const int DiscordResult_InvalidEntitlement = 25;
  static const int DiscordResult_NotInstalled = 26;
  static const int DiscordResult_NotRunning = 27;
  static const int DiscordResult_InsufficientBuffer = 28;
  static const int DiscordResult_PurchaseCanceled = 29;
  static const int DiscordResult_InvalidGuild = 30;
  static const int DiscordResult_InvalidEvent = 31;
  static const int DiscordResult_InvalidChannel = 32;
  static const int DiscordResult_InvalidOrigin = 33;
  static const int DiscordResult_RateLimited = 34;
  static const int DiscordResult_OAuth2Error = 35;
  static const int DiscordResult_SelectChannelTimeout = 36;
  static const int DiscordResult_GetGuildTimeout = 37;
  static const int DiscordResult_SelectVoiceForceRequired = 38;
  static const int DiscordResult_CaptureShortcutAlreadyListening = 39;
  static const int DiscordResult_UnauthorizedForAchievement = 40;
  static const int DiscordResult_InvalidGiftCode = 41;
  static const int DiscordResult_PurchaseError = 42;
  static const int DiscordResult_TransactionAborted = 43;
}

abstract class EDiscordCreateFlags {
  static const int DiscordCreateFlags_Default = 0;
  static const int DiscordCreateFlags_NoRequireDiscord = 1;
}

abstract class EDiscordLogLevel {
  static const int DiscordLogLevel_Error = 1;
  static const int DiscordLogLevel_Warn = 2;
  static const int DiscordLogLevel_Info = 3;
  static const int DiscordLogLevel_Debug = 4;
}

abstract class EDiscordUserFlag {
  static const int DiscordUserFlag_Partner = 2;
  static const int DiscordUserFlag_HypeSquadEvents = 4;
  static const int DiscordUserFlag_HypeSquadHouse1 = 64;
  static const int DiscordUserFlag_HypeSquadHouse2 = 128;
  static const int DiscordUserFlag_HypeSquadHouse3 = 256;
}

abstract class EDiscordPremiumType {
  static const int DiscordPremiumType_None = 0;
  static const int DiscordPremiumType_Tier1 = 1;
  static const int DiscordPremiumType_Tier2 = 2;
}

abstract class EDiscordImageType {
  static const int DiscordImageType_User = 0;
}

abstract class EDiscordActivityType {
  static const int DiscordActivityType_Playing = 0;
  static const int DiscordActivityType_Streaming = 1;
  static const int DiscordActivityType_Listening = 2;
  static const int DiscordActivityType_Watching = 3;
}

abstract class EDiscordActivityActionType {
  static const int DiscordActivityActionType_Join = 1;
  static const int DiscordActivityActionType_Spectate = 2;
}

abstract class EDiscordActivityJoinRequestReply {
  static const int DiscordActivityJoinRequestReply_No = 0;
  static const int DiscordActivityJoinRequestReply_Yes = 1;
  static const int DiscordActivityJoinRequestReply_Ignore = 2;
}

abstract class EDiscordStatus {
  static const int DiscordStatus_Offline = 0;
  static const int DiscordStatus_Online = 1;
  static const int DiscordStatus_Idle = 2;
  static const int DiscordStatus_DoNotDisturb = 3;
}

abstract class EDiscordRelationshipType {
  static const int DiscordRelationshipType_None = 0;
  static const int DiscordRelationshipType_Friend = 1;
  static const int DiscordRelationshipType_Blocked = 2;
  static const int DiscordRelationshipType_PendingIncoming = 3;
  static const int DiscordRelationshipType_PendingOutgoing = 4;
  static const int DiscordRelationshipType_Implicit = 5;
}

abstract class EDiscordLobbyType {
  static const int DiscordLobbyType_Private = 1;
  static const int DiscordLobbyType_Public = 2;
}

abstract class EDiscordLobbySearchComparison {
  static const int DiscordLobbySearchComparison_LessThanOrEqual = -2;
  static const int DiscordLobbySearchComparison_LessThan = -1;
  static const int DiscordLobbySearchComparison_Equal = 0;
  static const int DiscordLobbySearchComparison_GreaterThan = 1;
  static const int DiscordLobbySearchComparison_GreaterThanOrEqual = 2;
  static const int DiscordLobbySearchComparison_NotEqual = 3;
}

abstract class EDiscordLobbySearchCast {
  static const int DiscordLobbySearchCast_String = 1;
  static const int DiscordLobbySearchCast_Number = 2;
}

abstract class EDiscordLobbySearchDistance {
  static const int DiscordLobbySearchDistance_Local = 0;
  static const int DiscordLobbySearchDistance_Default = 1;
  static const int DiscordLobbySearchDistance_Extended = 2;
  static const int DiscordLobbySearchDistance_Global = 3;
}

abstract class EDiscordEntitlementType {
  static const int DiscordEntitlementType_Purchase = 1;
  static const int DiscordEntitlementType_PremiumSubscription = 2;
  static const int DiscordEntitlementType_DeveloperGift = 3;
  static const int DiscordEntitlementType_TestModePurchase = 4;
  static const int DiscordEntitlementType_FreePurchase = 5;
  static const int DiscordEntitlementType_UserGift = 6;
  static const int DiscordEntitlementType_PremiumPurchase = 7;
}

abstract class EDiscordSkuType {
  static const int DiscordSkuType_Application = 1;
  static const int DiscordSkuType_DLC = 2;
  static const int DiscordSkuType_Consumable = 3;
  static const int DiscordSkuType_Bundle = 4;
}

abstract class EDiscordInputModeType {
  static const int DiscordInputModeType_VoiceActivity = 0;
  static const int DiscordInputModeType_PushToTalk = 1;
}

class DiscordUser extends ffi.Struct {
  @DiscordUserId()
  external int id;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Int8> username;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Int8> discriminator;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.Int8> avatar;

  @ffi.Uint8()
  external int bot;
}

typedef DiscordUserId = DiscordSnowflake;
typedef DiscordSnowflake = ffi.Int64;

class DiscordOAuth2Token extends ffi.Struct {
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Int8> access_token;

  @ffi.Array.multi([1024])
  external ffi.Array<ffi.Int8> scopes;

  @DiscordTimestamp()
  external int expires;
}

typedef DiscordTimestamp = ffi.Int64;

class DiscordImageHandle extends ffi.Struct {
  @ffi.Int32()
  external int type;

  @ffi.Int64()
  external int id;

  @ffi.Uint32()
  external int size;
}

class DiscordImageDimensions extends ffi.Struct {
  @ffi.Uint32()
  external int width;

  @ffi.Uint32()
  external int height;
}

class DiscordActivityTimestamps extends ffi.Struct {
  @DiscordTimestamp()
  external int start;

  @DiscordTimestamp()
  external int end;
}

class DiscordActivityAssets extends ffi.Struct {
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Int8> large_image;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.Int8> large_text;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.Int8> small_image;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.Int8> small_text;
}

class DiscordPartySize extends ffi.Struct {
  @ffi.Int32()
  external int current_size;

  @ffi.Int32()
  external int max_size;
}

class DiscordActivityParty extends ffi.Struct {
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Int8> id;

  external DiscordPartySize size;
}

class DiscordActivitySecrets extends ffi.Struct {
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Int8> match;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.Int8> join;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.Int8> spectate;
}

class DiscordActivity extends ffi.Struct {
  @ffi.Int32()
  external int type;

  @ffi.Int64()
  external int application_id;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.Int8> name;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.Int8> state;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.Int8> details;

  external DiscordActivityTimestamps timestamps;

  external DiscordActivityAssets assets;

  external DiscordActivityParty party;

  external DiscordActivitySecrets secrets;

  @ffi.Uint8()
  external int instance;
}

class DiscordPresence extends ffi.Struct {
  @ffi.Int32()
  external int status;

  external DiscordActivity activity;
}

class DiscordRelationship extends ffi.Struct {
  @ffi.Int32()
  external int type;

  external DiscordUser user;

  external DiscordPresence presence;
}

class DiscordLobby extends ffi.Struct {
  @DiscordLobbyId()
  external int id;

  @ffi.Int32()
  external int type;

  @DiscordUserId()
  external int owner_id;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.Int8> secret;

  @ffi.Uint32()
  external int capacity;

  @ffi.Uint8()
  external int locked;
}

typedef DiscordLobbyId = DiscordSnowflake;

class DiscordFileStat extends ffi.Struct {
  @ffi.Array.multi([260])
  external ffi.Array<ffi.Int8> filename;

  @ffi.Uint64()
  external int size;

  @ffi.Uint64()
  external int last_modified;
}

class DiscordEntitlement extends ffi.Struct {
  @DiscordSnowflake()
  external int id;

  @ffi.Int32()
  external int type;

  @DiscordSnowflake()
  external int sku_id;
}

class DiscordSkuPrice extends ffi.Struct {
  @ffi.Uint32()
  external int amount;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Int8> currency;
}

class DiscordSku extends ffi.Struct {
  @DiscordSnowflake()
  external int id;

  @ffi.Int32()
  external int type;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Int8> name;

  external DiscordSkuPrice price;
}

class DiscordInputMode extends ffi.Struct {
  @ffi.Int32()
  external int type;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Int8> shortcut;
}

class DiscordUserAchievement extends ffi.Struct {
  @DiscordSnowflake()
  external int user_id;

  @DiscordSnowflake()
  external int achievement_id;

  @ffi.Uint8()
  external int percent_complete;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Int8> unlocked_at;
}

class IDiscordLobbyTransaction extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<IDiscordLobbyTransaction>, ffi.Int32)>> set_type;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<IDiscordLobbyTransaction>, DiscordUserId)>> set_owner;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<IDiscordLobbyTransaction>, ffi.Uint32)>> set_capacity;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<IDiscordLobbyTransaction>,
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>> set_metadata;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<IDiscordLobbyTransaction>,
              ffi.Pointer<ffi.Int8>)>> delete_metadata;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<IDiscordLobbyTransaction>, ffi.Uint8)>> set_locked;
}

class IDiscordLobbyMemberTransaction extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<IDiscordLobbyMemberTransaction>,
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>> set_metadata;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<IDiscordLobbyMemberTransaction>,
              ffi.Pointer<ffi.Int8>)>> delete_metadata;
}

class IDiscordLobbySearchQuery extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<IDiscordLobbySearchQuery>,
              ffi.Pointer<ffi.Int8>,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Int8>)>> filter;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<IDiscordLobbySearchQuery>,
              ffi.Pointer<ffi.Int8>, ffi.Int32, ffi.Pointer<ffi.Int8>)>> sort;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<IDiscordLobbySearchQuery>, ffi.Uint32)>> limit;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<IDiscordLobbySearchQuery>, ffi.Int32)>> distance;
}

class IDiscordApplicationManager extends ffi.Struct {
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<IDiscordApplicationManager>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(
                              ffi.Pointer<ffi.Void>, ffi.Int32)>>)>>
      validate_or_exit;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<IDiscordApplicationManager>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>> get_current_locale;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<IDiscordApplicationManager>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>> get_current_branch;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<IDiscordApplicationManager>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                              ffi.Pointer<DiscordOAuth2Token>)>>)>>
      get_oauth2_token;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<IDiscordApplicationManager>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                          ffi.Pointer<ffi.Int8>)>>)>> get_ticket;
}

class IDiscordUserEvents extends ffi.Struct {
  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      on_current_user_update;
}

class IDiscordUserManager extends ffi.Struct {
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<IDiscordUserManager>, ffi.Pointer<DiscordUser>)>>
      get_current_user;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<IDiscordUserManager>,
              DiscordUserId,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                          ffi.Pointer<DiscordUser>)>>)>> get_user;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<IDiscordUserManager>, ffi.Pointer<ffi.Int32>)>>
      get_current_user_premium_type;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<IDiscordUserManager>, ffi.Int32,
              ffi.Pointer<ffi.Uint8>)>> current_user_has_flag;
}

class IDiscordImageManager extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<IDiscordImageManager>,
              DiscordImageHandle,
              ffi.Uint8,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                          DiscordImageHandle)>>)>> fetch;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<IDiscordImageManager>,
              DiscordImageHandle,
              ffi.Pointer<DiscordImageDimensions>)>> get_dimensions;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<IDiscordImageManager>,
              DiscordImageHandle,
              ffi.Pointer<ffi.Uint8>,
              ffi.Uint32)>> get_data;
}

class IDiscordActivityEvents extends ffi.Struct {
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int8>)>>
      on_activity_join;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int8>)>>
      on_activity_spectate;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<DiscordUser>)>>
      on_activity_join_request;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<DiscordUser>,
              ffi.Pointer<DiscordActivity>)>> on_activity_invite;
}

class IDiscordActivityManager extends ffi.Struct {
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<IDiscordActivityManager>, ffi.Pointer<ffi.Int8>)>>
      register_command;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<IDiscordActivityManager>, ffi.Uint32)>>
      register_steam;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<IDiscordActivityManager>,
                  ffi.Pointer<DiscordActivity>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(
                              ffi.Pointer<ffi.Void>, ffi.Int32)>>)>>
      update_activity;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<IDiscordActivityManager>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>, ffi.Int32)>>)>> clear_activity;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<IDiscordActivityManager>,
                  DiscordUserId,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(
                              ffi.Pointer<ffi.Void>, ffi.Int32)>>)>>
      send_request_reply;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<IDiscordActivityManager>,
              DiscordUserId,
              ffi.Int32,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>, ffi.Int32)>>)>> send_invite;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<IDiscordActivityManager>,
              DiscordUserId,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>, ffi.Int32)>>)>> accept_invite;
}

class IDiscordRelationshipEvents extends ffi.Struct {
  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      on_refresh;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<DiscordRelationship>)>>
      on_relationship_update;
}

class IDiscordRelationshipManager extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<IDiscordRelationshipManager>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Uint8 Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<DiscordRelationship>)>>)>> filter;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<IDiscordRelationshipManager>,
              ffi.Pointer<ffi.Int32>)>> count;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<IDiscordRelationshipManager>,
              DiscordUserId, ffi.Pointer<DiscordRelationship>)>> get1;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<IDiscordRelationshipManager>,
              ffi.Uint32, ffi.Pointer<DiscordRelationship>)>> get_at;
}

class IDiscordLobbyEvents extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int64)>> on_lobby_update;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int64, ffi.Uint32)>>
      on_lobby_delete;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int64, ffi.Int64)>>
      on_member_connect;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int64, ffi.Int64)>>
      on_member_update;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int64, ffi.Int64)>>
      on_member_disconnect;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int64, ffi.Int64,
              ffi.Pointer<ffi.Uint8>, ffi.Uint32)>> on_lobby_message;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Void>, ffi.Int64, ffi.Int64, ffi.Uint8)>>
      on_speaking;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Int64,
              ffi.Int64,
              ffi.Uint8,
              ffi.Pointer<ffi.Uint8>,
              ffi.Uint32)>> on_network_message;
}

class IDiscordLobbyManager extends ffi.Struct {
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<IDiscordLobbyManager>,
                  ffi.Pointer<ffi.Pointer<IDiscordLobbyTransaction>>)>>
      get_lobby_create_transaction;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<IDiscordLobbyManager>,
                  DiscordLobbyId,
                  ffi.Pointer<ffi.Pointer<IDiscordLobbyTransaction>>)>>
      get_lobby_update_transaction;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<IDiscordLobbyManager>,
                  DiscordLobbyId,
                  DiscordUserId,
                  ffi.Pointer<ffi.Pointer<IDiscordLobbyMemberTransaction>>)>>
      get_member_update_transaction;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<IDiscordLobbyManager>,
              ffi.Pointer<IDiscordLobbyTransaction>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                          ffi.Pointer<DiscordLobby>)>>)>> create_lobby;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<IDiscordLobbyManager>,
              DiscordLobbyId,
              ffi.Pointer<IDiscordLobbyTransaction>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>, ffi.Int32)>>)>> update_lobby;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<IDiscordLobbyManager>,
              DiscordLobbyId,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>, ffi.Int32)>>)>> delete_lobby;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<IDiscordLobbyManager>,
              DiscordLobbyId,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                          ffi.Pointer<DiscordLobby>)>>)>> connect_lobby;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<IDiscordLobbyManager>,
                  ffi.Pointer<ffi.Int8>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                              ffi.Pointer<DiscordLobby>)>>)>>
      connect_lobby_with_activity_secret;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<IDiscordLobbyManager>,
                  DiscordLobbyId,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(
                              ffi.Pointer<ffi.Void>, ffi.Int32)>>)>>
      disconnect_lobby;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<IDiscordLobbyManager>, DiscordLobbyId,
              ffi.Pointer<DiscordLobby>)>> get_lobby;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<IDiscordLobbyManager>, DiscordLobbyId,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>> get_lobby_activity_secret;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<IDiscordLobbyManager>,
              DiscordLobbyId,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>> get_lobby_metadata_value;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<IDiscordLobbyManager>,
              DiscordLobbyId,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>> get_lobby_metadata_key;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<IDiscordLobbyManager>, DiscordLobbyId,
              ffi.Pointer<ffi.Int32>)>> lobby_metadata_count;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<IDiscordLobbyManager>, DiscordLobbyId,
              ffi.Pointer<ffi.Int32>)>> member_count;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<IDiscordLobbyManager>, DiscordLobbyId,
              ffi.Int32, ffi.Pointer<DiscordUserId>)>> get_member_user_id;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<IDiscordLobbyManager>, DiscordLobbyId,
              DiscordUserId, ffi.Pointer<DiscordUser>)>> get_member_user;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<IDiscordLobbyManager>,
              DiscordLobbyId,
              DiscordUserId,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>> get_member_metadata_value;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<IDiscordLobbyManager>,
              DiscordLobbyId,
              DiscordUserId,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>> get_member_metadata_key;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<IDiscordLobbyManager>, DiscordLobbyId,
              DiscordUserId, ffi.Pointer<ffi.Int32>)>> member_metadata_count;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<IDiscordLobbyManager>,
              DiscordLobbyId,
              DiscordUserId,
              ffi.Pointer<IDiscordLobbyMemberTransaction>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>, ffi.Int32)>>)>> update_member;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<IDiscordLobbyManager>,
                  DiscordLobbyId,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Uint32,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(
                              ffi.Pointer<ffi.Void>, ffi.Int32)>>)>>
      send_lobby_message;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<IDiscordLobbyManager>,
                  ffi.Pointer<ffi.Pointer<IDiscordLobbySearchQuery>>)>>
      get_search_query;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<IDiscordLobbyManager>,
              ffi.Pointer<IDiscordLobbySearchQuery>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>, ffi.Int32)>>)>> search;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<IDiscordLobbyManager>, ffi.Pointer<ffi.Int32>)>>
      lobby_count;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<IDiscordLobbyManager>, ffi.Int32,
              ffi.Pointer<DiscordLobbyId>)>> get_lobby_id;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<IDiscordLobbyManager>,
              DiscordLobbyId,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>, ffi.Int32)>>)>> connect_voice;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<IDiscordLobbyManager>,
                  DiscordLobbyId,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(
                              ffi.Pointer<ffi.Void>, ffi.Int32)>>)>>
      disconnect_voice;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<IDiscordLobbyManager>, DiscordLobbyId)>>
      connect_network;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<IDiscordLobbyManager>, DiscordLobbyId)>>
      disconnect_network;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<IDiscordLobbyManager>)>> flush_network;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<IDiscordLobbyManager>, DiscordLobbyId,
              ffi.Uint8, ffi.Uint8)>> open_network_channel;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<IDiscordLobbyManager>,
              DiscordLobbyId,
              DiscordUserId,
              ffi.Uint8,
              ffi.Pointer<ffi.Uint8>,
              ffi.Uint32)>> send_network_message;
}

class IDiscordNetworkEvents extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              DiscordNetworkPeerId,
              DiscordNetworkChannelId,
              ffi.Pointer<ffi.Uint8>,
              ffi.Uint32)>> on_message;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int8>)>>
      on_route_update;
}

typedef DiscordNetworkPeerId = ffi.Uint64;
typedef DiscordNetworkChannelId = ffi.Uint8;

class IDiscordNetworkManager extends ffi.Struct {
  /// Get the local peer ID for this process.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<IDiscordNetworkManager>,
              ffi.Pointer<DiscordNetworkPeerId>)>> get_peer_id;

  /// Send pending network messages.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<IDiscordNetworkManager>)>> flush;

  /// Open a connection to a remote peer.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<IDiscordNetworkManager>,
              DiscordNetworkPeerId, ffi.Pointer<ffi.Int8>)>> open_peer;

  /// Update the route data for a connected peer.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<IDiscordNetworkManager>,
              DiscordNetworkPeerId, ffi.Pointer<ffi.Int8>)>> update_peer;

  /// Close the connection to a remote peer.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<IDiscordNetworkManager>, DiscordNetworkPeerId)>>
      close_peer;

  /// Open a message channel to a connected peer.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<IDiscordNetworkManager>,
              DiscordNetworkPeerId,
              DiscordNetworkChannelId,
              ffi.Uint8)>> open_channel;

  /// Close a message channel to a connected peer.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<IDiscordNetworkManager>,
              DiscordNetworkPeerId, DiscordNetworkChannelId)>> close_channel;

  /// Send a message to a connected peer over an opened message channel.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<IDiscordNetworkManager>,
              DiscordNetworkPeerId,
              DiscordNetworkChannelId,
              ffi.Pointer<ffi.Uint8>,
              ffi.Uint32)>> send_message;
}

class IDiscordOverlayEvents extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Uint8)>> on_toggle;
}

class IDiscordOverlayManager extends ffi.Struct {
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<IDiscordOverlayManager>, ffi.Pointer<ffi.Uint8>)>>
      is_enabled;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<IDiscordOverlayManager>, ffi.Pointer<ffi.Uint8>)>>
      is_locked;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<IDiscordOverlayManager>,
              ffi.Uint8,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>, ffi.Int32)>>)>> set_locked;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<IDiscordOverlayManager>,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(
                              ffi.Pointer<ffi.Void>, ffi.Int32)>>)>>
      open_activity_invite;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<IDiscordOverlayManager>,
                  ffi.Pointer<ffi.Int8>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(
                              ffi.Pointer<ffi.Void>, ffi.Int32)>>)>>
      open_guild_invite;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<IDiscordOverlayManager>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(
                              ffi.Pointer<ffi.Void>, ffi.Int32)>>)>>
      open_voice_settings;
}

class IDiscordStorageManager extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<IDiscordStorageManager>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Uint32,
              ffi.Pointer<ffi.Uint32>)>> read;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<IDiscordStorageManager>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                          ffi.Pointer<ffi.Uint8>, ffi.Uint32)>>)>> read_async;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<IDiscordStorageManager>,
              ffi.Pointer<ffi.Int8>,
              ffi.Uint64,
              ffi.Uint64,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>,
                          ffi.Int32,
                          ffi.Pointer<ffi.Uint8>,
                          ffi.Uint32)>>)>> read_async_partial;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<IDiscordStorageManager>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Uint32)>> write;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<IDiscordStorageManager>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Uint32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>, ffi.Int32)>>)>> write_async;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<IDiscordStorageManager>, ffi.Pointer<ffi.Int8>)>>
      delete_;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<IDiscordStorageManager>,
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Uint8>)>> exists;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<IDiscordStorageManager>, ffi.Pointer<ffi.Int32>)>>
      count;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<IDiscordStorageManager>,
              ffi.Pointer<ffi.Int8>, ffi.Pointer<DiscordFileStat>)>> stat;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<IDiscordStorageManager>, ffi.Int32,
              ffi.Pointer<DiscordFileStat>)>> stat_at;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<IDiscordStorageManager>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>> get_path;
}

class IDiscordStoreEvents extends ffi.Struct {
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<DiscordEntitlement>)>>
      on_entitlement_create;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<DiscordEntitlement>)>>
      on_entitlement_delete;
}

class IDiscordStoreManager extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<IDiscordStoreManager>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>, ffi.Int32)>>)>> fetch_skus;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<IDiscordStoreManager>, ffi.Pointer<ffi.Int32>)>>
      count_skus;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<IDiscordStoreManager>,
              DiscordSnowflake, ffi.Pointer<DiscordSku>)>> get_sku;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<IDiscordStoreManager>, ffi.Int32,
              ffi.Pointer<DiscordSku>)>> get_sku_at;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<IDiscordStoreManager>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(
                              ffi.Pointer<ffi.Void>, ffi.Int32)>>)>>
      fetch_entitlements;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<IDiscordStoreManager>, ffi.Pointer<ffi.Int32>)>>
      count_entitlements;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<IDiscordStoreManager>,
              DiscordSnowflake,
              ffi.Pointer<DiscordEntitlement>)>> get_entitlement;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<IDiscordStoreManager>, ffi.Int32,
              ffi.Pointer<DiscordEntitlement>)>> get_entitlement_at;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<IDiscordStoreManager>,
              DiscordSnowflake, ffi.Pointer<ffi.Uint8>)>> has_sku_entitlement;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<IDiscordStoreManager>,
              DiscordSnowflake,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>, ffi.Int32)>>)>> start_purchase;
}

class IDiscordVoiceEvents extends ffi.Struct {
  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      on_settings_update;
}

class IDiscordVoiceManager extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<IDiscordVoiceManager>,
              ffi.Pointer<DiscordInputMode>)>> get_input_mode;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<IDiscordVoiceManager>,
              DiscordInputMode,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>, ffi.Int32)>>)>> set_input_mode;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<IDiscordVoiceManager>, ffi.Pointer<ffi.Uint8>)>>
      is_self_mute;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<IDiscordVoiceManager>, ffi.Uint8)>>
      set_self_mute;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<IDiscordVoiceManager>, ffi.Pointer<ffi.Uint8>)>>
      is_self_deaf;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<IDiscordVoiceManager>, ffi.Uint8)>>
      set_self_deaf;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<IDiscordVoiceManager>,
              DiscordSnowflake, ffi.Pointer<ffi.Uint8>)>> is_local_mute;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<IDiscordVoiceManager>,
              DiscordSnowflake, ffi.Uint8)>> set_local_mute;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<IDiscordVoiceManager>,
              DiscordSnowflake, ffi.Pointer<ffi.Uint8>)>> get_local_volume;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<IDiscordVoiceManager>,
              DiscordSnowflake, ffi.Uint8)>> set_local_volume;
}

class IDiscordAchievementEvents extends ffi.Struct {
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<DiscordUserAchievement>)>>
      on_user_achievement_update;
}

class IDiscordAchievementManager extends ffi.Struct {
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<IDiscordAchievementManager>,
                  DiscordSnowflake,
                  ffi.Uint8,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(
                              ffi.Pointer<ffi.Void>, ffi.Int32)>>)>>
      set_user_achievement;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<IDiscordAchievementManager>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(
                              ffi.Pointer<ffi.Void>, ffi.Int32)>>)>>
      fetch_user_achievements;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<IDiscordAchievementManager>,
              ffi.Pointer<ffi.Int32>)>> count_user_achievements;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<IDiscordAchievementManager>,
              DiscordSnowflake,
              ffi.Pointer<DiscordUserAchievement>)>> get_user_achievement;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<IDiscordAchievementManager>, ffi.Int32,
              ffi.Pointer<DiscordUserAchievement>)>> get_user_achievement_at;
}

class IDiscordCore extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<ffi.Void Function(ffi.Pointer<IDiscordCore>)>> destroy;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<IDiscordCore>)>>
      run_callbacks;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<IDiscordCore>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                          ffi.Pointer<ffi.Int8>)>>)>> set_log_hook;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<IDiscordApplicationManager> Function(
              ffi.Pointer<IDiscordCore>)>> get_application_manager;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<IDiscordUserManager> Function(
              ffi.Pointer<IDiscordCore>)>> get_user_manager;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<IDiscordImageManager> Function(
              ffi.Pointer<IDiscordCore>)>> get_image_manager;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<IDiscordActivityManager> Function(
              ffi.Pointer<IDiscordCore>)>> get_activity_manager;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<IDiscordRelationshipManager> Function(
              ffi.Pointer<IDiscordCore>)>> get_relationship_manager;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<IDiscordLobbyManager> Function(
              ffi.Pointer<IDiscordCore>)>> get_lobby_manager;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<IDiscordNetworkManager> Function(
              ffi.Pointer<IDiscordCore>)>> get_network_manager;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<IDiscordOverlayManager> Function(
              ffi.Pointer<IDiscordCore>)>> get_overlay_manager;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<IDiscordStorageManager> Function(
              ffi.Pointer<IDiscordCore>)>> get_storage_manager;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<IDiscordStoreManager> Function(
              ffi.Pointer<IDiscordCore>)>> get_store_manager;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<IDiscordVoiceManager> Function(
              ffi.Pointer<IDiscordCore>)>> get_voice_manager;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<IDiscordAchievementManager> Function(
              ffi.Pointer<IDiscordCore>)>> get_achievement_manager;
}

class DiscordCreateParams extends ffi.Struct {
  @DiscordClientId()
  external int client_id;

  @ffi.Uint64()
  external int flags;

  external ffi.Pointer<IDiscordCoreEvents> events;

  external ffi.Pointer<ffi.Void> event_data;

  external ffi.Pointer<IDiscordApplicationEvents> application_events;

  @DiscordVersion()
  external int application_version;

  external ffi.Pointer<IDiscordUserEvents> user_events;

  @DiscordVersion()
  external int user_version;

  external ffi.Pointer<IDiscordImageEvents> image_events;

  @DiscordVersion()
  external int image_version;

  external ffi.Pointer<IDiscordActivityEvents> activity_events;

  @DiscordVersion()
  external int activity_version;

  external ffi.Pointer<IDiscordRelationshipEvents> relationship_events;

  @DiscordVersion()
  external int relationship_version;

  external ffi.Pointer<IDiscordLobbyEvents> lobby_events;

  @DiscordVersion()
  external int lobby_version;

  external ffi.Pointer<IDiscordNetworkEvents> network_events;

  @DiscordVersion()
  external int network_version;

  external ffi.Pointer<IDiscordOverlayEvents> overlay_events;

  @DiscordVersion()
  external int overlay_version;

  external ffi.Pointer<IDiscordStorageEvents> storage_events;

  @DiscordVersion()
  external int storage_version;

  external ffi.Pointer<IDiscordStoreEvents> store_events;

  @DiscordVersion()
  external int store_version;

  external ffi.Pointer<IDiscordVoiceEvents> voice_events;

  @DiscordVersion()
  external int voice_version;

  external ffi.Pointer<IDiscordAchievementEvents> achievement_events;

  @DiscordVersion()
  external int achievement_version;
}

typedef DiscordClientId = ffi.Int64;
typedef IDiscordCoreEvents = ffi.Pointer<ffi.Void>;
typedef IDiscordApplicationEvents = ffi.Pointer<ffi.Void>;
typedef DiscordVersion = ffi.Int32;
typedef IDiscordImageEvents = ffi.Pointer<ffi.Void>;
typedef IDiscordStorageEvents = ffi.Pointer<ffi.Void>;

const int __WORDSIZE = 64;

const int __DARWIN_ONLY_64_BIT_INO_T = 0;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_ONLY_VERS_1050 = 0;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_64_BIT_INO_T = '\$INODE64';

const String __DARWIN_SUF_1050 = '\$1050';

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int USER_ADDR_NULL = 0;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -32768;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 32767;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 65535;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MAX = 9223372036854775807;

const int INTPTR_MIN = -9223372036854775808;

const int UINTPTR_MAX = -1;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int WCHAR_MAX = 2147483647;

const int WCHAR_MIN = -2147483648;

const int WINT_MIN = -2147483648;

const int WINT_MAX = 2147483647;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int __DARWIN_WCHAR_MAX = 2147483647;

const int __DARWIN_WCHAR_MIN = -2147483648;

const int __DARWIN_WEOF = -1;

const int _FORTIFY_SOURCE = 2;

const int __API_TO_BE_DEPRECATED = 100000;

const int __MAC_10_0 = 1000;

const int __MAC_10_1 = 1010;

const int __MAC_10_2 = 1020;

const int __MAC_10_3 = 1030;

const int __MAC_10_4 = 1040;

const int __MAC_10_5 = 1050;

const int __MAC_10_6 = 1060;

const int __MAC_10_7 = 1070;

const int __MAC_10_8 = 1080;

const int __MAC_10_9 = 1090;

const int __MAC_10_10 = 101000;

const int __MAC_10_10_2 = 101002;

const int __MAC_10_10_3 = 101003;

const int __MAC_10_11 = 101100;

const int __MAC_10_11_2 = 101102;

const int __MAC_10_11_3 = 101103;

const int __MAC_10_11_4 = 101104;

const int __MAC_10_12 = 101200;

const int __MAC_10_12_1 = 101201;

const int __MAC_10_12_2 = 101202;

const int __MAC_10_12_4 = 101204;

const int __MAC_10_13 = 101300;

const int __MAC_10_13_1 = 101301;

const int __MAC_10_13_2 = 101302;

const int __MAC_10_13_4 = 101304;

const int __MAC_10_14 = 101400;

const int __MAC_10_14_1 = 101401;

const int __MAC_10_14_4 = 101404;

const int __MAC_10_14_6 = 101406;

const int __MAC_10_15 = 101500;

const int __MAC_10_15_1 = 101501;

const int __MAC_10_15_4 = 101504;

const int __MAC_10_16 = 101600;

const int __MAC_11_0 = 110000;

const int __MAC_11_1 = 110100;

const int __MAC_11_3 = 110300;

const int __MAC_11_4 = 110400;

const int __MAC_11_5 = 110500;

const int __MAC_12_0 = 120000;

const int __IPHONE_2_0 = 20000;

const int __IPHONE_2_1 = 20100;

const int __IPHONE_2_2 = 20200;

const int __IPHONE_3_0 = 30000;

const int __IPHONE_3_1 = 30100;

const int __IPHONE_3_2 = 30200;

const int __IPHONE_4_0 = 40000;

const int __IPHONE_4_1 = 40100;

const int __IPHONE_4_2 = 40200;

const int __IPHONE_4_3 = 40300;

const int __IPHONE_5_0 = 50000;

const int __IPHONE_5_1 = 50100;

const int __IPHONE_6_0 = 60000;

const int __IPHONE_6_1 = 60100;

const int __IPHONE_7_0 = 70000;

const int __IPHONE_7_1 = 70100;

const int __IPHONE_8_0 = 80000;

const int __IPHONE_8_1 = 80100;

const int __IPHONE_8_2 = 80200;

const int __IPHONE_8_3 = 80300;

const int __IPHONE_8_4 = 80400;

const int __IPHONE_9_0 = 90000;

const int __IPHONE_9_1 = 90100;

const int __IPHONE_9_2 = 90200;

const int __IPHONE_9_3 = 90300;

const int __IPHONE_10_0 = 100000;

const int __IPHONE_10_1 = 100100;

const int __IPHONE_10_2 = 100200;

const int __IPHONE_10_3 = 100300;

const int __IPHONE_11_0 = 110000;

const int __IPHONE_11_1 = 110100;

const int __IPHONE_11_2 = 110200;

const int __IPHONE_11_3 = 110300;

const int __IPHONE_11_4 = 110400;

const int __IPHONE_12_0 = 120000;

const int __IPHONE_12_1 = 120100;

const int __IPHONE_12_2 = 120200;

const int __IPHONE_12_3 = 120300;

const int __IPHONE_12_4 = 120400;

const int __IPHONE_13_0 = 130000;

const int __IPHONE_13_1 = 130100;

const int __IPHONE_13_2 = 130200;

const int __IPHONE_13_3 = 130300;

const int __IPHONE_13_4 = 130400;

const int __IPHONE_13_5 = 130500;

const int __IPHONE_13_6 = 130600;

const int __IPHONE_13_7 = 130700;

const int __IPHONE_14_0 = 140000;

const int __IPHONE_14_1 = 140100;

const int __IPHONE_14_2 = 140200;

const int __IPHONE_14_3 = 140300;

const int __IPHONE_14_5 = 140500;

const int __IPHONE_14_6 = 140600;

const int __IPHONE_14_7 = 140700;

const int __IPHONE_14_8 = 140800;

const int __IPHONE_15_0 = 150000;

const int __TVOS_9_0 = 90000;

const int __TVOS_9_1 = 90100;

const int __TVOS_9_2 = 90200;

const int __TVOS_10_0 = 100000;

const int __TVOS_10_0_1 = 100001;

const int __TVOS_10_1 = 100100;

const int __TVOS_10_2 = 100200;

const int __TVOS_11_0 = 110000;

const int __TVOS_11_1 = 110100;

const int __TVOS_11_2 = 110200;

const int __TVOS_11_3 = 110300;

const int __TVOS_11_4 = 110400;

const int __TVOS_12_0 = 120000;

const int __TVOS_12_1 = 120100;

const int __TVOS_12_2 = 120200;

const int __TVOS_12_3 = 120300;

const int __TVOS_12_4 = 120400;

const int __TVOS_13_0 = 130000;

const int __TVOS_13_2 = 130200;

const int __TVOS_13_3 = 130300;

const int __TVOS_13_4 = 130400;

const int __TVOS_14_0 = 140000;

const int __TVOS_14_1 = 140100;

const int __TVOS_14_2 = 140200;

const int __TVOS_14_3 = 140300;

const int __TVOS_14_5 = 140500;

const int __TVOS_14_6 = 140600;

const int __TVOS_14_7 = 140700;

const int __TVOS_15_0 = 150000;

const int __WATCHOS_1_0 = 10000;

const int __WATCHOS_2_0 = 20000;

const int __WATCHOS_2_1 = 20100;

const int __WATCHOS_2_2 = 20200;

const int __WATCHOS_3_0 = 30000;

const int __WATCHOS_3_1 = 30100;

const int __WATCHOS_3_1_1 = 30101;

const int __WATCHOS_3_2 = 30200;

const int __WATCHOS_4_0 = 40000;

const int __WATCHOS_4_1 = 40100;

const int __WATCHOS_4_2 = 40200;

const int __WATCHOS_4_3 = 40300;

const int __WATCHOS_5_0 = 50000;

const int __WATCHOS_5_1 = 50100;

const int __WATCHOS_5_2 = 50200;

const int __WATCHOS_5_3 = 50300;

const int __WATCHOS_6_0 = 60000;

const int __WATCHOS_6_1 = 60100;

const int __WATCHOS_6_2 = 60200;

const int __WATCHOS_7_0 = 70000;

const int __WATCHOS_7_1 = 70100;

const int __WATCHOS_7_2 = 70200;

const int __WATCHOS_7_3 = 70300;

const int __WATCHOS_7_4 = 70400;

const int __WATCHOS_7_5 = 70500;

const int __WATCHOS_7_6 = 70600;

const int __WATCHOS_8_0 = 80000;

const int MAC_OS_X_VERSION_10_0 = 1000;

const int MAC_OS_X_VERSION_10_1 = 1010;

const int MAC_OS_X_VERSION_10_2 = 1020;

const int MAC_OS_X_VERSION_10_3 = 1030;

const int MAC_OS_X_VERSION_10_4 = 1040;

const int MAC_OS_X_VERSION_10_5 = 1050;

const int MAC_OS_X_VERSION_10_6 = 1060;

const int MAC_OS_X_VERSION_10_7 = 1070;

const int MAC_OS_X_VERSION_10_8 = 1080;

const int MAC_OS_X_VERSION_10_9 = 1090;

const int MAC_OS_X_VERSION_10_10 = 101000;

const int MAC_OS_X_VERSION_10_10_2 = 101002;

const int MAC_OS_X_VERSION_10_10_3 = 101003;

const int MAC_OS_X_VERSION_10_11 = 101100;

const int MAC_OS_X_VERSION_10_11_2 = 101102;

const int MAC_OS_X_VERSION_10_11_3 = 101103;

const int MAC_OS_X_VERSION_10_11_4 = 101104;

const int MAC_OS_X_VERSION_10_12 = 101200;

const int MAC_OS_X_VERSION_10_12_1 = 101201;

const int MAC_OS_X_VERSION_10_12_2 = 101202;

const int MAC_OS_X_VERSION_10_12_4 = 101204;

const int MAC_OS_X_VERSION_10_13 = 101300;

const int MAC_OS_X_VERSION_10_13_1 = 101301;

const int MAC_OS_X_VERSION_10_13_2 = 101302;

const int MAC_OS_X_VERSION_10_13_4 = 101304;

const int MAC_OS_X_VERSION_10_14 = 101400;

const int MAC_OS_X_VERSION_10_14_1 = 101401;

const int MAC_OS_X_VERSION_10_14_4 = 101404;

const int MAC_OS_X_VERSION_10_14_6 = 101406;

const int MAC_OS_X_VERSION_10_15 = 101500;

const int MAC_OS_X_VERSION_10_15_1 = 101501;

const int MAC_OS_X_VERSION_10_16 = 101600;

const int MAC_OS_VERSION_11_0 = 110000;

const int MAC_OS_VERSION_12_0 = 120000;

const int __DRIVERKIT_19_0 = 190000;

const int __DRIVERKIT_20_0 = 200000;

const int __DRIVERKIT_21_0 = 210000;

const int __MAC_OS_X_VERSION_MIN_REQUIRED = 120000;

const int __MAC_OS_X_VERSION_MAX_ALLOWED = 120000;

const int __ENABLE_LEGACY_MAC_AVAILABILITY = 1;

const int NULL = 0;

const int true1 = 1;

const int false1 = 0;

const int DISCORD_VERSION = 2;

const int DISCORD_APPLICATION_MANAGER_VERSION = 1;

const int DISCORD_USER_MANAGER_VERSION = 1;

const int DISCORD_IMAGE_MANAGER_VERSION = 1;

const int DISCORD_ACTIVITY_MANAGER_VERSION = 1;

const int DISCORD_RELATIONSHIP_MANAGER_VERSION = 1;

const int DISCORD_LOBBY_MANAGER_VERSION = 1;

const int DISCORD_NETWORK_MANAGER_VERSION = 1;

const int DISCORD_OVERLAY_MANAGER_VERSION = 1;

const int DISCORD_STORAGE_MANAGER_VERSION = 1;

const int DISCORD_STORE_MANAGER_VERSION = 1;

const int DISCORD_VOICE_MANAGER_VERSION = 1;

const int DISCORD_ACHIEVEMENT_MANAGER_VERSION = 1;
