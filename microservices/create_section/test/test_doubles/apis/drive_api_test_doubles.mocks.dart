// Mocks generated by Mockito 5.0.0-nullsafety.7 from annotations
// in create_section/test/test_doubles/apis/drive_api_test_doubles.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:_discoveryapis_commons/src/requests.dart' as _i4;
import 'package:googleapis/drive/v3.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

class _FakeAboutResource extends _i1.Fake implements _i2.AboutResource {}

class _FakeChangesResource extends _i1.Fake implements _i2.ChangesResource {}

class _FakeChannelsResource extends _i1.Fake implements _i2.ChannelsResource {}

class _FakeCommentsResource extends _i1.Fake implements _i2.CommentsResource {}

class _FakeDrivesResource extends _i1.Fake implements _i2.DrivesResource {}

class _FakeFilesResource extends _i1.Fake implements _i2.FilesResource {}

class _FakePermissionsResource extends _i1.Fake
    implements _i2.PermissionsResource {}

class _FakeRepliesResource extends _i1.Fake implements _i2.RepliesResource {}

class _FakeRevisionsResource extends _i1.Fake implements _i2.RevisionsResource {
}

class _FakeTeamdrivesResource extends _i1.Fake
    implements _i2.TeamdrivesResource {}

class _FakeFile extends _i1.Fake implements _i2.File {}

class _FakeObject extends _i1.Fake implements Object {}

class _FakeGeneratedIds extends _i1.Fake implements _i2.GeneratedIds {}

class _FakeFileList extends _i1.Fake implements _i2.FileList {}

/// A class which mocks [DriveApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockDriveApi extends _i1.Mock implements _i2.DriveApi {
  MockDriveApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AboutResource get about => (super.noSuchMethod(Invocation.getter(#about),
      returnValue: _FakeAboutResource()) as _i2.AboutResource);
  @override
  _i2.ChangesResource get changes =>
      (super.noSuchMethod(Invocation.getter(#changes),
          returnValue: _FakeChangesResource()) as _i2.ChangesResource);
  @override
  _i2.ChannelsResource get channels =>
      (super.noSuchMethod(Invocation.getter(#channels),
          returnValue: _FakeChannelsResource()) as _i2.ChannelsResource);
  @override
  _i2.CommentsResource get comments =>
      (super.noSuchMethod(Invocation.getter(#comments),
          returnValue: _FakeCommentsResource()) as _i2.CommentsResource);
  @override
  _i2.DrivesResource get drives =>
      (super.noSuchMethod(Invocation.getter(#drives),
          returnValue: _FakeDrivesResource()) as _i2.DrivesResource);
  @override
  _i2.FilesResource get files => (super.noSuchMethod(Invocation.getter(#files),
      returnValue: _FakeFilesResource()) as _i2.FilesResource);
  @override
  _i2.PermissionsResource get permissions =>
      (super.noSuchMethod(Invocation.getter(#permissions),
          returnValue: _FakePermissionsResource()) as _i2.PermissionsResource);
  @override
  _i2.RepliesResource get replies =>
      (super.noSuchMethod(Invocation.getter(#replies),
          returnValue: _FakeRepliesResource()) as _i2.RepliesResource);
  @override
  _i2.RevisionsResource get revisions =>
      (super.noSuchMethod(Invocation.getter(#revisions),
          returnValue: _FakeRevisionsResource()) as _i2.RevisionsResource);
  @override
  _i2.TeamdrivesResource get teamdrives =>
      (super.noSuchMethod(Invocation.getter(#teamdrives),
          returnValue: _FakeTeamdrivesResource()) as _i2.TeamdrivesResource);
}

/// A class which mocks [FilesResource].
///
/// See the documentation for Mockito's code generation for more information.
class MockFilesResource extends _i1.Mock implements _i2.FilesResource {
  MockFilesResource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i2.File> copy(_i2.File? request, String? fileId,
          {bool? enforceSingleParent,
          bool? ignoreDefaultVisibility,
          String? includePermissionsForView,
          bool? keepRevisionForever,
          String? ocrLanguage,
          bool? supportsAllDrives,
          bool? supportsTeamDrives,
          String? $fields}) =>
      (super.noSuchMethod(
          Invocation.method(#copy, [
            request,
            fileId
          ], {
            #enforceSingleParent: enforceSingleParent,
            #ignoreDefaultVisibility: ignoreDefaultVisibility,
            #includePermissionsForView: includePermissionsForView,
            #keepRevisionForever: keepRevisionForever,
            #ocrLanguage: ocrLanguage,
            #supportsAllDrives: supportsAllDrives,
            #supportsTeamDrives: supportsTeamDrives,
            #$fields: $fields
          }),
          returnValue: Future.value(_FakeFile())) as _i3.Future<_i2.File>);
  @override
  _i3.Future<_i2.File> create(_i2.File? request,
          {bool? enforceSingleParent,
          bool? ignoreDefaultVisibility,
          String? includePermissionsForView,
          bool? keepRevisionForever,
          String? ocrLanguage,
          bool? supportsAllDrives,
          bool? supportsTeamDrives,
          bool? useContentAsIndexableText,
          String? $fields,
          _i4.UploadOptions? uploadOptions = _i4.UploadOptions.Default,
          _i4.Media? uploadMedia}) =>
      (super.noSuchMethod(
          Invocation.method(#create, [
            request
          ], {
            #enforceSingleParent: enforceSingleParent,
            #ignoreDefaultVisibility: ignoreDefaultVisibility,
            #includePermissionsForView: includePermissionsForView,
            #keepRevisionForever: keepRevisionForever,
            #ocrLanguage: ocrLanguage,
            #supportsAllDrives: supportsAllDrives,
            #supportsTeamDrives: supportsTeamDrives,
            #useContentAsIndexableText: useContentAsIndexableText,
            #$fields: $fields,
            #uploadOptions: uploadOptions,
            #uploadMedia: uploadMedia
          }),
          returnValue: Future.value(_FakeFile())) as _i3.Future<_i2.File>);
  @override
  _i3.Future<void> delete(String? fileId,
          {bool? enforceSingleParent,
          bool? supportsAllDrives,
          bool? supportsTeamDrives,
          String? $fields}) =>
      (super.noSuchMethod(
          Invocation.method(#delete, [
            fileId
          ], {
            #enforceSingleParent: enforceSingleParent,
            #supportsAllDrives: supportsAllDrives,
            #supportsTeamDrives: supportsTeamDrives,
            #$fields: $fields
          }),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> emptyTrash({bool? enforceSingleParent, String? $fields}) =>
      (super.noSuchMethod(
          Invocation.method(#emptyTrash, [],
              {#enforceSingleParent: enforceSingleParent, #$fields: $fields}),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
  @override
  _i3.Future<Object> export(String? fileId, String? mimeType,
          {String? $fields,
          _i4.DownloadOptions? downloadOptions =
              _i4.DownloadOptions.Metadata}) =>
      (super.noSuchMethod(
          Invocation.method(#export, [fileId, mimeType],
              {#$fields: $fields, #downloadOptions: downloadOptions}),
          returnValue: Future.value(_FakeObject())) as _i3.Future<Object>);
  @override
  _i3.Future<_i2.GeneratedIds> generateIds(
          {int? count, String? space, String? $fields}) =>
      (super.noSuchMethod(
              Invocation.method(#generateIds, [],
                  {#count: count, #space: space, #$fields: $fields}),
              returnValue: Future.value(_FakeGeneratedIds()))
          as _i3.Future<_i2.GeneratedIds>);
  @override
  _i3.Future<Object> get(String? fileId,
          {bool? acknowledgeAbuse,
          String? includePermissionsForView,
          bool? supportsAllDrives,
          bool? supportsTeamDrives,
          String? $fields,
          _i4.DownloadOptions? downloadOptions =
              _i4.DownloadOptions.Metadata}) =>
      (super.noSuchMethod(
          Invocation.method(#get, [
            fileId
          ], {
            #acknowledgeAbuse: acknowledgeAbuse,
            #includePermissionsForView: includePermissionsForView,
            #supportsAllDrives: supportsAllDrives,
            #supportsTeamDrives: supportsTeamDrives,
            #$fields: $fields,
            #downloadOptions: downloadOptions
          }),
          returnValue: Future.value(_FakeObject())) as _i3.Future<Object>);
  @override
  _i3.Future<_i2.FileList> list(
          {String? corpora,
          String? corpus,
          String? driveId,
          bool? includeItemsFromAllDrives,
          String? includePermissionsForView,
          bool? includeTeamDriveItems,
          String? orderBy,
          int? pageSize,
          String? pageToken,
          String? q,
          String? spaces,
          bool? supportsAllDrives,
          bool? supportsTeamDrives,
          String? teamDriveId,
          String? $fields}) =>
      (super.noSuchMethod(
              Invocation.method(#list, [], {
                #corpora: corpora,
                #corpus: corpus,
                #driveId: driveId,
                #includeItemsFromAllDrives: includeItemsFromAllDrives,
                #includePermissionsForView: includePermissionsForView,
                #includeTeamDriveItems: includeTeamDriveItems,
                #orderBy: orderBy,
                #pageSize: pageSize,
                #pageToken: pageToken,
                #q: q,
                #spaces: spaces,
                #supportsAllDrives: supportsAllDrives,
                #supportsTeamDrives: supportsTeamDrives,
                #teamDriveId: teamDriveId,
                #$fields: $fields
              }),
              returnValue: Future.value(_FakeFileList()))
          as _i3.Future<_i2.FileList>);
  @override
  _i3.Future<_i2.File> update(_i2.File? request, String? fileId,
          {String? addParents,
          bool? enforceSingleParent,
          String? includePermissionsForView,
          bool? keepRevisionForever,
          String? ocrLanguage,
          String? removeParents,
          bool? supportsAllDrives,
          bool? supportsTeamDrives,
          bool? useContentAsIndexableText,
          String? $fields,
          _i4.UploadOptions? uploadOptions = _i4.UploadOptions.Default,
          _i4.Media? uploadMedia}) =>
      (super.noSuchMethod(
          Invocation.method(#update, [
            request,
            fileId
          ], {
            #addParents: addParents,
            #enforceSingleParent: enforceSingleParent,
            #includePermissionsForView: includePermissionsForView,
            #keepRevisionForever: keepRevisionForever,
            #ocrLanguage: ocrLanguage,
            #removeParents: removeParents,
            #supportsAllDrives: supportsAllDrives,
            #supportsTeamDrives: supportsTeamDrives,
            #useContentAsIndexableText: useContentAsIndexableText,
            #$fields: $fields,
            #uploadOptions: uploadOptions,
            #uploadMedia: uploadMedia
          }),
          returnValue: Future.value(_FakeFile())) as _i3.Future<_i2.File>);
  @override
  _i3.Future<Object> watch(_i2.Channel? request, String? fileId,
          {bool? acknowledgeAbuse,
          String? includePermissionsForView,
          bool? supportsAllDrives,
          bool? supportsTeamDrives,
          String? $fields,
          _i4.DownloadOptions? downloadOptions =
              _i4.DownloadOptions.Metadata}) =>
      (super.noSuchMethod(
          Invocation.method(#watch, [
            request,
            fileId
          ], {
            #acknowledgeAbuse: acknowledgeAbuse,
            #includePermissionsForView: includePermissionsForView,
            #supportsAllDrives: supportsAllDrives,
            #supportsTeamDrives: supportsTeamDrives,
            #$fields: $fields,
            #downloadOptions: downloadOptions
          }),
          returnValue: Future.value(_FakeObject())) as _i3.Future<Object>);
}
