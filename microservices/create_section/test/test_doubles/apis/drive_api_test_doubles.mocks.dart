// Mocks generated by Mockito 5.0.0-nullsafety.7 from annotations
// in create_section/test/test_doubles/apis/drive_api_test_doubles.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:_discoveryapis_commons/src/requests.dart' as _i4;
import 'package:googleapis/drive/v3.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

class _FakeAboutResourceApi extends _i1.Fake implements _i2.AboutResourceApi {}

class _FakeChangesResourceApi extends _i1.Fake
    implements _i2.ChangesResourceApi {}

class _FakeChannelsResourceApi extends _i1.Fake
    implements _i2.ChannelsResourceApi {}

class _FakeCommentsResourceApi extends _i1.Fake
    implements _i2.CommentsResourceApi {}

class _FakeDrivesResourceApi extends _i1.Fake implements _i2.DrivesResourceApi {
}

class _FakeFilesResourceApi extends _i1.Fake implements _i2.FilesResourceApi {}

class _FakePermissionsResourceApi extends _i1.Fake
    implements _i2.PermissionsResourceApi {}

class _FakeRepliesResourceApi extends _i1.Fake
    implements _i2.RepliesResourceApi {}

class _FakeRevisionsResourceApi extends _i1.Fake
    implements _i2.RevisionsResourceApi {}

class _FakeTeamdrivesResourceApi extends _i1.Fake
    implements _i2.TeamdrivesResourceApi {}

class _FakeFile extends _i1.Fake implements _i2.File {}

class _FakeGeneratedIds extends _i1.Fake implements _i2.GeneratedIds {}

class _FakeFileList extends _i1.Fake implements _i2.FileList {}

/// A class which mocks [DriveApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockDriveApi extends _i1.Mock implements _i2.DriveApi {
  MockDriveApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AboutResourceApi get about =>
      (super.noSuchMethod(Invocation.getter(#about),
          returnValue: _FakeAboutResourceApi()) as _i2.AboutResourceApi);
  @override
  _i2.ChangesResourceApi get changes =>
      (super.noSuchMethod(Invocation.getter(#changes),
          returnValue: _FakeChangesResourceApi()) as _i2.ChangesResourceApi);
  @override
  _i2.ChannelsResourceApi get channels =>
      (super.noSuchMethod(Invocation.getter(#channels),
          returnValue: _FakeChannelsResourceApi()) as _i2.ChannelsResourceApi);
  @override
  _i2.CommentsResourceApi get comments =>
      (super.noSuchMethod(Invocation.getter(#comments),
          returnValue: _FakeCommentsResourceApi()) as _i2.CommentsResourceApi);
  @override
  _i2.DrivesResourceApi get drives =>
      (super.noSuchMethod(Invocation.getter(#drives),
          returnValue: _FakeDrivesResourceApi()) as _i2.DrivesResourceApi);
  @override
  _i2.FilesResourceApi get files =>
      (super.noSuchMethod(Invocation.getter(#files),
          returnValue: _FakeFilesResourceApi()) as _i2.FilesResourceApi);
  @override
  _i2.PermissionsResourceApi get permissions =>
      (super.noSuchMethod(Invocation.getter(#permissions),
              returnValue: _FakePermissionsResourceApi())
          as _i2.PermissionsResourceApi);
  @override
  _i2.RepliesResourceApi get replies =>
      (super.noSuchMethod(Invocation.getter(#replies),
          returnValue: _FakeRepliesResourceApi()) as _i2.RepliesResourceApi);
  @override
  _i2.RevisionsResourceApi get revisions => (super.noSuchMethod(
      Invocation.getter(#revisions),
      returnValue: _FakeRevisionsResourceApi()) as _i2.RevisionsResourceApi);
  @override
  _i2.TeamdrivesResourceApi get teamdrives => (super.noSuchMethod(
      Invocation.getter(#teamdrives),
      returnValue: _FakeTeamdrivesResourceApi()) as _i2.TeamdrivesResourceApi);
}

/// A class which mocks [FilesResourceApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockFilesResourceApi extends _i1.Mock implements _i2.FilesResourceApi {
  MockFilesResourceApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i2.File> copy(_i2.File? request, String? fileId,
          {bool? enforceSingleParent,
          bool? ignoreDefaultVisibility,
          String? includePermissionsForView,
          bool? keepRevisionForever,
          String? ocrLanguage,
          bool? supportsAllDrives,
          bool? supportsTeamDrives,
          String? $fields}) =>
      (super.noSuchMethod(
          Invocation.method(#copy, [
            request,
            fileId
          ], {
            #enforceSingleParent: enforceSingleParent,
            #ignoreDefaultVisibility: ignoreDefaultVisibility,
            #includePermissionsForView: includePermissionsForView,
            #keepRevisionForever: keepRevisionForever,
            #ocrLanguage: ocrLanguage,
            #supportsAllDrives: supportsAllDrives,
            #supportsTeamDrives: supportsTeamDrives,
            #$fields: $fields
          }),
          returnValue: Future.value(_FakeFile())) as _i3.Future<_i2.File>);
  @override
  _i3.Future<_i2.File> create(_i2.File? request,
          {bool? enforceSingleParent,
          bool? ignoreDefaultVisibility,
          String? includePermissionsForView,
          bool? keepRevisionForever,
          String? ocrLanguage,
          bool? supportsAllDrives,
          bool? supportsTeamDrives,
          bool? useContentAsIndexableText,
          String? $fields,
          _i4.UploadOptions? uploadOptions = _i4.UploadOptions.Default,
          _i4.Media? uploadMedia}) =>
      (super.noSuchMethod(
          Invocation.method(#create, [
            request
          ], {
            #enforceSingleParent: enforceSingleParent,
            #ignoreDefaultVisibility: ignoreDefaultVisibility,
            #includePermissionsForView: includePermissionsForView,
            #keepRevisionForever: keepRevisionForever,
            #ocrLanguage: ocrLanguage,
            #supportsAllDrives: supportsAllDrives,
            #supportsTeamDrives: supportsTeamDrives,
            #useContentAsIndexableText: useContentAsIndexableText,
            #$fields: $fields,
            #uploadOptions: uploadOptions,
            #uploadMedia: uploadMedia
          }),
          returnValue: Future.value(_FakeFile())) as _i3.Future<_i2.File>);
  @override
  _i3.Future<dynamic> delete(String? fileId,
          {bool? enforceSingleParent,
          bool? supportsAllDrives,
          bool? supportsTeamDrives,
          String? $fields}) =>
      (super.noSuchMethod(
          Invocation.method(#delete, [
            fileId
          ], {
            #enforceSingleParent: enforceSingleParent,
            #supportsAllDrives: supportsAllDrives,
            #supportsTeamDrives: supportsTeamDrives,
            #$fields: $fields
          }),
          returnValue: Future.value(null)) as _i3.Future<dynamic>);
  @override
  _i3.Future<dynamic> emptyTrash(
          {bool? enforceSingleParent, String? $fields}) =>
      (super.noSuchMethod(
          Invocation.method(#emptyTrash, [],
              {#enforceSingleParent: enforceSingleParent, #$fields: $fields}),
          returnValue: Future.value(null)) as _i3.Future<dynamic>);
  @override
  _i3.Future<dynamic> export(String? fileId, String? mimeType,
          {String? $fields,
          _i4.DownloadOptions? downloadOptions =
              _i4.DownloadOptions.Metadata}) =>
      (super.noSuchMethod(
          Invocation.method(#export, [fileId, mimeType],
              {#$fields: $fields, #downloadOptions: downloadOptions}),
          returnValue: Future.value(null)) as _i3.Future<dynamic>);
  @override
  _i3.Future<_i2.GeneratedIds> generateIds(
          {int? count, String? space, String? $fields}) =>
      (super.noSuchMethod(
              Invocation.method(#generateIds, [],
                  {#count: count, #space: space, #$fields: $fields}),
              returnValue: Future.value(_FakeGeneratedIds()))
          as _i3.Future<_i2.GeneratedIds>);
  @override
  _i3.Future<dynamic> get(String? fileId,
          {bool? acknowledgeAbuse,
          String? includePermissionsForView,
          bool? supportsAllDrives,
          bool? supportsTeamDrives,
          String? $fields,
          _i4.DownloadOptions? downloadOptions =
              _i4.DownloadOptions.Metadata}) =>
      (super.noSuchMethod(
          Invocation.method(#get, [
            fileId
          ], {
            #acknowledgeAbuse: acknowledgeAbuse,
            #includePermissionsForView: includePermissionsForView,
            #supportsAllDrives: supportsAllDrives,
            #supportsTeamDrives: supportsTeamDrives,
            #$fields: $fields,
            #downloadOptions: downloadOptions
          }),
          returnValue: Future.value(null)) as _i3.Future<dynamic>);
  @override
  _i3.Future<_i2.FileList> list(
          {String? corpora,
          String? corpus,
          String? driveId,
          bool? includeItemsFromAllDrives,
          String? includePermissionsForView,
          bool? includeTeamDriveItems,
          String? orderBy,
          int? pageSize,
          String? pageToken,
          String? q,
          String? spaces,
          bool? supportsAllDrives,
          bool? supportsTeamDrives,
          String? teamDriveId,
          String? $fields}) =>
      (super.noSuchMethod(
              Invocation.method(#list, [], {
                #corpora: corpora,
                #corpus: corpus,
                #driveId: driveId,
                #includeItemsFromAllDrives: includeItemsFromAllDrives,
                #includePermissionsForView: includePermissionsForView,
                #includeTeamDriveItems: includeTeamDriveItems,
                #orderBy: orderBy,
                #pageSize: pageSize,
                #pageToken: pageToken,
                #q: q,
                #spaces: spaces,
                #supportsAllDrives: supportsAllDrives,
                #supportsTeamDrives: supportsTeamDrives,
                #teamDriveId: teamDriveId,
                #$fields: $fields
              }),
              returnValue: Future.value(_FakeFileList()))
          as _i3.Future<_i2.FileList>);
  @override
  _i3.Future<_i2.File> update(_i2.File? request, String? fileId,
          {String? addParents,
          bool? enforceSingleParent,
          String? includePermissionsForView,
          bool? keepRevisionForever,
          String? ocrLanguage,
          String? removeParents,
          bool? supportsAllDrives,
          bool? supportsTeamDrives,
          bool? useContentAsIndexableText,
          String? $fields,
          _i4.UploadOptions? uploadOptions = _i4.UploadOptions.Default,
          _i4.Media? uploadMedia}) =>
      (super.noSuchMethod(
          Invocation.method(#update, [
            request,
            fileId
          ], {
            #addParents: addParents,
            #enforceSingleParent: enforceSingleParent,
            #includePermissionsForView: includePermissionsForView,
            #keepRevisionForever: keepRevisionForever,
            #ocrLanguage: ocrLanguage,
            #removeParents: removeParents,
            #supportsAllDrives: supportsAllDrives,
            #supportsTeamDrives: supportsTeamDrives,
            #useContentAsIndexableText: useContentAsIndexableText,
            #$fields: $fields,
            #uploadOptions: uploadOptions,
            #uploadMedia: uploadMedia
          }),
          returnValue: Future.value(_FakeFile())) as _i3.Future<_i2.File>);
  @override
  _i3.Future<dynamic> watch(_i2.Channel? request, String? fileId,
          {bool? acknowledgeAbuse,
          String? includePermissionsForView,
          bool? supportsAllDrives,
          bool? supportsTeamDrives,
          String? $fields,
          _i4.DownloadOptions? downloadOptions =
              _i4.DownloadOptions.Metadata}) =>
      (super.noSuchMethod(
          Invocation.method(#watch, [
            request,
            fileId
          ], {
            #acknowledgeAbuse: acknowledgeAbuse,
            #includePermissionsForView: includePermissionsForView,
            #supportsAllDrives: supportsAllDrives,
            #supportsTeamDrives: supportsTeamDrives,
            #$fields: $fields,
            #downloadOptions: downloadOptions
          }),
          returnValue: Future.value(null)) as _i3.Future<dynamic>);
}
