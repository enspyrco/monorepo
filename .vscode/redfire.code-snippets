{ 
  "redfire action": {
    "prefix": "rf_action",
    "body": [
      "import 'package:freezed_annotation/freezed_annotation.dart';",
      "import 'package:redfire/types.dart';",
      "",
      "part '${TM_FILENAME_BASE}.freezed.dart';",
      "part '${TM_FILENAME_BASE}.g.dart';",
      "",
      "@freezed",
      "class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g} with _$${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}, ReduxAction {",
      "\tstatic const String className = '${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}';",
      "", 
      "\tconst ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}._();",
      "\tconst factory ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}({${1}}) = _${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g};",
      "",
      "factory ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}.fromJson(JsonMap json) => _$${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}FromJson(json);",
      "",
      "\t@override",
      "\tString get typeName => className;",
      "}"
    ],
    "description": "redfire action with freezed"
  },
  "redfire action (tap)": {
    "prefix": "rf_action_tap",
    "body": [
      "import 'package:freezed_annotation/freezed_annotation.dart';",
      "import 'package:redfire/types.dart';",
      "",
      "part '${TM_FILENAME_BASE}.freezed.dart';",
      "part '${TM_FILENAME_BASE}.g.dart';",
      "",
      "@freezed",
      "class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g} with _$${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}, ReduxAction {",
      "\tstatic const String className = '${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}';",
      "", 
      "\tconst ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}._();",
      "\tconst factory ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}({@Default(false) bool turnOff}) = _${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g};",
      "",
      "\tfactory ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}.fromJson(JsonMap json) => _$${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}FromJson(json);",
      "",
      "\t@override",
      "\tString get typeName => className;",
      "}"
    ],
    "description": "redfire action for tapping the db, with freezed"
  },
  "redfire middleware": {
    "prefix": "rf_middleware",
    "body": [
      "import 'package:${WORKSPACE_NAME}/app_state.dart';",
      "import 'package:redfire/extensions.dart';",
      "import 'package:redfire/services.dart';",
      "import 'package:redux/redux.dart';",

      "",
      "class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}Middleware extends TypedMiddleware<AppState, ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}Action> {",
      "\t${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}Middleware() : super((store, action, next) async {",
      "\t\tnext(action);",
      "",
      "\t\ttry {",
      "\t\t\tfinal service = RedFireLocator${1}",
      "\t\t\tstore.dispatch();",
      "\t\t} catch (error, trace) {",
      "\t\t\tstore.dispatchProblem(error, trace);",
      "\t\t}",
      "\t});",
      "}"
    ],
    "description": "redfire middleware with freezed"
  },
  "redfire middleware (tap)": {
    "prefix": "rf_middleware_tap",
    "body": [
      "import 'dart:async';",
      "",
      "import 'package:${WORKSPACE_NAME}/app_state.dart';",
      "import 'package:fast_immutable_collections/fast_immutable_collections.dart';",
      "import 'package:redfire/extensions.dart';",
      "import 'package:redfire/services.dart';",
      "import 'package:redfire/types.dart';",
      "import 'package:redux/redux.dart';",

      "",
      "class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}Middleware extends TypedMiddleware<AppState, ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}Action> {",
      "\t${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}Middleware() : super((store, action, next) async {",
      "\t\tnext(action);",
      "",
      "\t\ttry {",
      "\t\t\tawait _subscription?.cancel();",
      "",
      "\t\t\t// The subscription is cancelled, so to turn off we just return ...",
      "\t\t\tif (action.turnOff) { return; }",
      "",
      "\t\t\t// ... otherwise tap the database at the appropriate location...",
      "\t\t\tfinal service = RedFireLocator.getDatabaseService();",
      "\t\t\tfinal changes = service.tapCollection(at: '${1}');",
      "",
      "\t\t\t// ... and direct the stream to the store.",
      "\t\t\t_subscription = changes.listen((jsonList) {",
      "\t\t\tvar models = jsonList.map<${2}Model>((jsonItem) => ${2}Model.fromJson(jsonItem as JsonMap)).toISet();",
      "\t\t\tstore.dispatch(Set${2}sAction(models));",
      "\t\t}, onError: store.dispatchProblem);",
      "\t\t} catch (error, trace) {",
      "\t\t\tstore.dispatchProblem(error, trace);",
      "\t\t}",
      "\t});",
      "\tstatic StreamSubscription<JsonList>? _subscription;",
      "}"
    ],
    "description": "redfire middleware for tapping the db, with freezed"
  },
  "redfire middleware for redfire": {
    "prefix": "rf_middleware_redfire",
    "body": [
      "import 'package:redfire/extensions.dart';",
      "import 'package:redfire/services.dart';",
      "import 'package:redfire/types.dart';",
      "import 'package:redux/redux.dart';",

      "",
      "class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}Middleware<T extends RedFireState> extends TypedMiddleware<T, ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}Action> {",
      "\t${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}Middleware() : super((store, action, next) async {",
      "\t\tnext(action);",
      "",
      "\t\ttry {",
      "\t\t\tfinal service = RedFireLocator${1}",
      "\t\t\tstore.dispatch();",
      "\t\t} catch (error, trace) {",
      "\t\t\tstore.dispatchProblem(error, trace);",
      "\t\t}",
      "\t});",
      "}"
    ],
    "description": "redfire middleware with freezed, for use in redfire"
  },
  "redfire page": {
    "prefix": "rf_page",
    "body": [
      "import 'package:flutter/material.dart';",
      "import 'package:freezed_annotation/freezed_annotation.dart';",
      "import 'package:redfire/types.dart';",
      "",
      "part '${TM_FILENAME_BASE}.freezed.dart';",
      "part '${TM_FILENAME_BASE}.g.dart';",
      "",
      "@freezed",
      "class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}Data extends PageData with _$${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}Data, ReduxState  {",
      "\tstatic const String className = '${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}Data';",
      "",
      "\tconst ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}Data._();",
      "\tconst factory ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}Data({ ${1} }) = _${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}Data;",
      "",
      "\tfactory ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}Data.fromJson(JsonMap json) => _$${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}DataFromJson(json);",
      "",
      "\t@override",
      "\tString get typeName => className;",
      "}",
      "",
      "class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}Transforms extends PageDataTransforms {",
      "${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}Transforms() : super(typeName: ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}Data.className,",
      "\t\ttoMaterialPage: (pageData) => MaterialPage<dynamic>(key: const ValueKey(${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}Data), child: ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}(pageData as ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}Data)),",
      "\t\tfromJson: (json) => ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}Data.fromJson(json),);",
      "}",
      "",
      "class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g} extends StatelessWidget {",
      "\tconst ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}(${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}Data data, { Key? key }) : super(key: key);",
      "",
      "\t@override",
      "\tWidget build(BuildContext context) {",
      "\t\treturn Container();",
      "\t}",
      "}"
    ],
    "description": "redfire page - freezed class for state, classes for transforms and a view"
  },
  "redfire reducer": {
    "prefix": "rf_reducer",
    "body": [
      "import 'package:${WORKSPACE_NAME}/app_state.dart';",
      "import 'package:redux/redux.dart';",
      "",
      "class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}Reducer extends TypedReducer<AppState, ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}Action> {",
      "\t${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}Reducer() : super((state, action) => state.copyWith(${1}: action.${1}),);",
      "}",
    ],
    "description": "redfire reducer with freezed"
  },
  "redfire reducer for redfire": {
    "prefix": "rf_reducer_redfire",
    "body": [
      "import 'package:${WORKSPACE_NAME}/app_state.dart';",
      "import 'package:redfire/src/types/red_fire_state.dart';",
      "import 'package:redux/redux.dart';",
      "",
      "class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}Reducer<T extends RedFireState> extends TypedReducer<T, ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}Action> {",
      "\t${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}Reducer() : super((state, action) => (state as dynamic).copyWith.(${1}: action.${1}), as T);",
      "}",
    ],
    "description": "redfire reducer with freezed, for use in redfire"
  },
  "redfire state": {
    "prefix": "rf_state",
    "body": [
      "import 'package:freezed_annotation/freezed_annotation.dart';",
      "import 'package:redfire/types.dart';",
      "",
      "part '${TM_FILENAME_BASE}.freezed.dart';",
      "part '${TM_FILENAME_BASE}.g.dart';",
      "",
      "@freezed",
      "class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g} with _$${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}, ReduxState  {",
      "\tstatic const String className = '${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}';",
      "", 
      "\tconst ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}._();",
      "\tconst factory ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}({ ${1} }) = _${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g};",
      "",
      "\tfactory ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}.fromJson(JsonMap json) => _$${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}FromJson(json);",
      "",
      "\t@override",
      "\tString get typeName => className;",
      "}"
    ],
    "description": "redfire state with freezed"
  }
}