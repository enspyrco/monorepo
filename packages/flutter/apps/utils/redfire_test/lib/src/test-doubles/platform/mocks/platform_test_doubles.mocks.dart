// Mocks generated by Mockito 5.0.16 from annotations
// in redfire_test/src/test-doubles/platform/mocks/platform_test_doubles.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;
import 'dart:ui' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:redfire/src/platform/plugins/wrappers/platform_wrapper.dart'
    as _i2;
import 'package:redfire/src/platform/plugins/wrappers/url_launcher_wrapper.dart'
    as _i3;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [PlatformWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlatformWrapper extends _i1.Mock implements _i2.PlatformWrapper {
  MockPlatformWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isIOS =>
      (super.noSuchMethod(Invocation.getter(#isIOS), returnValue: false)
          as bool);
  @override
  bool get isAndroid =>
      (super.noSuchMethod(Invocation.getter(#isAndroid), returnValue: false)
          as bool);
  @override
  bool get isMacOS =>
      (super.noSuchMethod(Invocation.getter(#isMacOS), returnValue: false)
          as bool);
  @override
  bool get isFuchsia =>
      (super.noSuchMethod(Invocation.getter(#isFuchsia), returnValue: false)
          as bool);
  @override
  bool get isLinux =>
      (super.noSuchMethod(Invocation.getter(#isLinux), returnValue: false)
          as bool);
  @override
  bool get isWindows =>
      (super.noSuchMethod(Invocation.getter(#isWindows), returnValue: false)
          as bool);
  @override
  String toString() => super.toString();
}

/// A class which mocks [UrlLauncherWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockUrlLauncherWrapper extends _i1.Mock
    implements _i3.UrlLauncherWrapper {
  MockUrlLauncherWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> launch(String? urlString,
          {bool? forceSafariVC,
          bool? forceWebView = false,
          bool? enableJavaScript = false,
          bool? enableDomStorage = false,
          bool? universalLinksOnly = false,
          Map<String, String>? headers = const {},
          _i5.Brightness? statusBarBrightness,
          String? webOnlyWindowName}) =>
      (super.noSuchMethod(
          Invocation.method(#launch, [
            urlString
          ], {
            #forceSafariVC: forceSafariVC,
            #forceWebView: forceWebView,
            #enableJavaScript: enableJavaScript,
            #enableDomStorage: enableDomStorage,
            #universalLinksOnly: universalLinksOnly,
            #headers: headers,
            #statusBarBrightness: statusBarBrightness,
            #webOnlyWindowName: webOnlyWindowName
          }),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<bool> canLaunch(String? urlString) =>
      (super.noSuchMethod(Invocation.method(#canLaunch, [urlString]),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  String toString() => super.toString();
}
